#!/usr/bin/python
""" File Tree Remover
    Removes Files in a File Tree from a given input.
"""
from pathlib import Path
from path_stack import PathStack
from procedural_data import ProceduralData


def remove_file(path: str, data_dir: str = None, data_label: str = None):
    """Remove a File from the Tree.
    Moves the File if Data Directory and Data Label are given.
    
    Parameters:
    - path (str): The path to the File.
    - data_dir (str): The Data Directory Path.
    - data_label (str): The Label for the Data Contents of the File being removed.
    """
    p = Path(path)
    # todo:
    if data_dir is None or data_label is None:
        p.unlink()
    else:
        # todo:
        p.rename(path, data_dir + data_label)


def remove_dir(path: str) -> bool:
    """Tries to Remove a Directory if it is Empty.

    Parameters:
    - path (str): The path to the Directory.

    Returns:
    bool : Whether the Directory was Empty and has been removed.
    """
    closed_dir = Path(path)
    # Check if it is empty
    if len(closed_dir.glob('*')) == 0:
        closed_dir.rmdir()
        return True
    return False


def trim_tree(input_tree: list[ProceduralData], data_dir: str = None):
    """Removes specific Files and Empty Directories from the File System.

    Parameters:
    - input_tree (str): The Tree Node Structure Input as a string.
    - data_dir (str, optional): The path to a Data Directory. Defaults to None.
    """
    path_stack = PathStack()
    # Process one line at a time
    for data in input_tree:
        # Adjust Path Stack to current Depth.
        while path_stack.get_depth() > data.depth:
            # Pop a Directory, get it's Path
            remove_dir(path_stack.create_path(path_stack.pop()))
        # Create the actual tree node in the file system
        if data.is_dir:
            path_stack.append(data.name)
        else:
            remove_file(
                path_stack.create_path(data.name),
                data_dir,
                data.data_arg
            )
    # Check PathStack's Remaining Directories
    while path_stack.get_depth() > 0:
        if not remove_dir(path_stack.create_path(path_stack.pop())):
            break


def main():
    """Validates Arguments, then runs File Tree Remover."""
    import sys
    from input_data import get_input_from_args
    from input_line_reader import process_many_lines
    args = get_input_from_args(sys.argv)
    input_tree = args.get_tree_input()
    # Check the Input
    if input_tree is None or len(input_tree) < 1:
        raise ValueError("Tree Input not found, or empty.")
    procedural_data_sequence = process_many_lines(input_tree)
    if len(procedural_data_sequence) < 1:
        raise SystemExit("Empty Procedure")
    trim_tree(
        procedural_data_sequence,
        args.data_dir
    )


if __name__ == "__main__":
    main()