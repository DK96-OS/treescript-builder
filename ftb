#!/usr/bin/python
""" File Tree Builder
    Builds a File Tree from a given input.
"""
import os
from pathstack import PathStack
from procedural_data import ProceduralData


def create_file(path: str, data: str) -> bool:
    """Ensure that a File at the given path exists.

    Parameters:
    - path (str): The Path to the File to be created, and written to.
    - data (str): The Data to be written to the File Content.
    """
    with open(path, 'w') as f:
        if data == "" or data is None:
            return True
        # Currently, inserts the Input Data Argument
        f.write(data)
        # todo: implement File Data Directory and Labelling
    return True


def build_tree(input_tree: list[ProceduralData], data_dir: str = None):
    """Builds the directory tree from the input structure.

    Parameters:
    - input_tree (str): The Tree Node Structure Input as a string.
    - root_path (str, optional): The path at the base of the Tree. Defaults to '.'.
    """
    path_stack = PathStack()
    # Process one line at a time
    for data in input_tree:
        # Adjust path stack to current depth.
        success = path_stack.reduce_depth(data.depth)
        if not success:
            raise ValueError("Invalid Depth at Tree Node")
        # Split Directory and File Handling
        if data.is_dir:
            path_stack.push(data.name)
            os.makedirs(path_stack.join_stack(), exist_ok=True)
        else:
            create_file(path_stack.create_path(data.name), data.data_arg)


def main():
    """Validates Arguments, then runs File Tree Builder."""
    from argument_validation import ArgumentValidation
    args = ArgumentValidation()
    build_tree(
        args.get_tree_input(),
        args.get_data_dir()
    )


if __name__ == "__main__":
    main()
